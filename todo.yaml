Tree:
  - Self-awareness - .contexttree (or similar) branch
  - Support for subcommands
    - create.int, create.string, create.<type>
    - list.commands
      list.all
  - Serialization to file
    - Values
    - Commands
  - Commands parameter tree (generation?)
  - Commands argument validation according to parameter tree
  - Type safety
  + Removal of nodes (just test delete command)
  - Read-only nodes
  - In-tree links support?
  - Easy creation of custom nodes from python classes
    - Get rid of Commands.py (move commands to Tree or similar place)
    - Find a way to implement @name, @path and @parent for every Node (inheritable attributes? actions?)
    - @VirtualAttribute decorator - for on-request node generation
    + @Attribute decorator
      - Add attribute rewrite to work with bare python classes (use @CreatorFunction to do this?)
    ? @Subnode decorator
    + @Action decorator
      - Take care of automatic parameter encapsulation (e.g. from Node<int> to just bare int)
      - Add method rewrite to work with bare python classes (use @CreatorFunction to do this?)
  - Sessions
  - Server-client architecture
  - Command output streaming - list | filter | ...
  - Field streaming - {list}|.@name (based on command output streaming; filter?)
  - Batch calling - {selected}: play
  - Index addressing

Functionality:
  - System executables as commands
  - File-to-node mapping
  - select and selected commands
  - Date/Time types
    - System time reading
  - Filesystem mapping
    - copy, cut and paste commands (using select(ed) commands?)
    - mime-type based file typing

Shell:
  - Suggestions
  - Autocompletion
  - Server-client architecture
  - Branch navigation commands (aka cd); should be in session?
  - Command invocation wizard (based on command's parameter tree)
  - set alias - .some.key = 321
  - get alias - .some.key (should be translated to .some.key: get if possible)


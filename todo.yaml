Tree backend:
  - Serialization to file
    - Values
    - Actions
  - Type safety
    - Action parameter tree (generation?)
    - Action argument validation according to parameter tree
  - Read-only nodes
  - In-tree links support?
  - Easy creation of custom nodes from python classes
    + @action decorator
  - Virtual attributes
    - @name
    - @path
    - @parent
  - Add 'Node.' prefix too all node-related actions
  - Customizable search path (or virtually merged branches)
  - Sessions/TreeViews
  - Server-client architecture
  - Index addressing
    - Anonymous (without name) nodes

Functionality:
  - Sessions:
    + Virtual mapping node - kind of a link
    - Temporary
      - select(ed)
      - copy/cut/paste
      - user session separation
    - Transaction
      - system settings update
    - Network transport
    - Security/permissions
    - Filesystem mapping?
    - virtual attributes?
  - Self-awareness - .contexttree (or similar) branch
  - Date/Time node
    - System time reading
  - Filesystem mapping
    - System executables as actions
    - copy, cut and paste actions (using select(ed) action?)
    - mime-type based file typing
  - Types support
    - Introspection commands
      - is
      - typeof
  - create.int
  - create.string
  - create.link
  - create.<type>
  + list.attributes
  - list.actions
  + list.all
  + list.nodes
  - select/selected
    - temporary/session storage
    - links
    + anonymous keys

Shell:
  - Autocompletion/suggestions
  - Server-client architecture
  - Branch navigation action (aka cd); should be in session?
  - Command invocation wizard (based on command's parameter tree)
  - set syntax sugar - .some.key = 321
  - get syntax sugar - .some.key (should be translated to .some.key: get if possible)
  - Command output streaming - list | filter | ...
  - Field streaming - {list}|.@name (based on command output streaming; filter?)
  - Batch calling - {selected}: play

